---
title: 05 | 数组：为什么很多编程语言中数组都从0开始编号？
tags: 数组,随机访问,寻址公式,数组越界,线性表,非线性表
renderNumberedHeading: true
grammar_cjkRuby: true
---

Author:  Qiao My
Create_Time: 2020-2-28

[toc]

> 很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的

# 要点总结
- 数组：用一块连续的内存空间，来存储相同类型的一组数据
- 数组的特点
  - 支持随机访问，根据下标随机访问的时间复杂度为O(1)
  - 插入、删除操作比较低效，平均情况时间复杂度为 O(n)

# 一、如何实现随机访问

数组(Array)：是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。

线性表(Linear List)：数据排成像线一样的结构。每个线性表上的数据最多只有前和后两个方向。数组、链表、队列、栈等也是线性表结构。
![](./images/1582885922105.png)
非线性表：在非线性表中，数据之间并不是简单的前后关系。如二叉树、堆、图等。
![](./images/1582885961454.png)

连续的内存空间 和 相同类型的数据：

> Blockquote

- 优势：由于这两个限制，数组有一个“撒手锏”特性->**随机访问**。
- 弊端：这两个限制让数组的很多操作变得非常低效，比如在数组中删除、插入一个数据，为了保证连续性，需要做大量的数据搬移工作。


数组是如何根据下标随机访问数组元素的？
## 数组寻址公式
```
a[i]_address = base_address + i * data_type_size
-----------    ----------    --   --------------
    |              |          |         |
    |          内存块首地址   数组下标      |
    |                                   - 数据类型大小
     -- 数组元素内存地址
```

数组和链表的区别？
链表 适合插入、删除，时间复杂度O(1)
数组 支持随机访问，根据下标随机访问的时间复杂度为O(1)；对于排序好的数组，二分法查的时间复杂度为O(logn)


# 二、低效的**插入**和**删除**
数组为了保持内存数据的连续性，会导致插入、删除操作比较低效。


数组的插入和删除为是什么会低效？如何改进？
## 1. 插入
### 低效的原因
假设数组长度为 n，需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来给新插入的数据，需要将第 k ~ n 的元素都顺序向后挪一位。
插入操作时间复杂度分析如下：
- 如果在数组末尾插入元素，不需要移动数据，最好时间复杂度为 O(1);
- 如果在数组开头插入元素，需要移动所有数据，最坏时间复杂度为 O(n);
- 每个位置的插入元素的概率是一样的，所以，平均情况时间复杂度为 (1+2+...+n)/n=O(n)

### 改进方法
如果数组中的数据是有序的，则必须搬移插入位置之后的数据。
但，如果数组中的数据并没有任何规律，数组只是被当做一个存储数据的集合。此时，可以直接将插入位置的元素(上例 k 位置)搬移到数组的最后，把新元素放入该位置。这种情况下，插入一个元素时间复杂度为 O(1)。
图例如下：

## 2. 删除
### 低效的原因
同插入类似，当删除第 k 个位置的数据，需要将 k ~ n 的数据都向前挪一位，不然中间会出现空洞，内存就不连续了。
时间复杂度同插入，最好为 O(1),最坏为 O(n)，平均情况时间复杂度为 O(n)。

### 改进方法
当元素被删除时，先记录数据已被删除，并不操作真正的 删除操作 和 搬移数据。当数组没有更多空间时，再触发一次真正的删除操作。这样可以大幅减少删除操作导致的数据搬移。

> 上述方法，也正是 JVM 标记清除垃圾回收算法的核心思想。

# 三、数组越界
```c
int main(int argc, char* argv[]){
    int i = 0;
    int arr[3] = {0};
    for(; i<=3; i++){
        arr[i] = 0;
        printf("hello world\n");
    }
    return 0;
}
```
代码解释：
这段代码的运行结果并非是打印三行“hello word”，而是会无限打印“hello world”。
因为，数组大小为 3，a[0]，a[1]，a[2]，for 循环的结束条件为 i<=3 而非 i<3，所以当 i=3 时，数组 a[3]访问越界。
在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。
根据我们前面讲的数组寻址公式，a[3]也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。

数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理。因为，访问**数组的本质就是访问一段连续内存**，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误。
并非所有的语言都像 C 一样，把数组越界检查的工作丢给程序员来做，像 Java 本身就会做越界检查。


# 四、容器能否完全替代数组？
在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。

# 五、为什么数组要从 0 开始编号，而不是从 1 开始？
**数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。**

从数组存储的内存模型上来看，`下标`最确切的定义应该是`偏移(offset)`。


我们拿一个长度为 10 的 int 类型的数组 int[] a = new int[10]来举例。在我画的这个图中，计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 base_address = 1000。
![](./images/1582885883790.png)

计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。
当计算机需要随机访问数组中的某个元素时，它会首先通过`寻址公式`，计算出该元素存储的内存地址。


从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。
如果用 a 来表示数组的首地址，a[0]就是偏移为 0 的位置，也就是首地址，a[k]就表示偏移 k 个 type_size 的位置，所以计算 a[k]的内存地址只需要用这个公式：
```
a[k]_address = base_address + k * type_size
```
如果数组从 1 开始计数，那我们计算数组元素 a[k]的内存地址就会变为：
```
a[k]_address = base_address + (k-1)*type_size
```
对比两个公式，我们不难发现，从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。

不过我认为，上面解释得再多其实都算不上压倒性的证明，说数组起始编号非 0 开始不可。所以我觉得最主要的原因可能是历史原因。



