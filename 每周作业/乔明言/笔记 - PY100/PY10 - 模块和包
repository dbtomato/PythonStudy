---
title: 10 - 模块和包
tags: 模块,函数,命名空间,作用域,搜索路径,包,Python,PYTHONPATH,变量,命名空间,作用域,闭包,__main__
renderNumberedHeading: true
grammar_cjkRuby: true
---

Author:  Qiao My
Create_Time: 2020-2-27

[toc]

Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。
模块让你能够有逻辑地组织你的 Python 代码段。把相关的代码分配到一个模块里能让你的代码更好用，更易懂。
模块能定义函数，类和变量，模块里也能包含可执行的代码。

# 一、使用模块
**引入语句必须在脚本的顶端，由于存在作用域冲突，函数中不允许使用`from`语句**

## 1. `import` 语句
模块定义好后，我们可以使用 import 语句来引入模块。
语法如下：
```python
import 包名路径.模块1 [as 引用对象别名][, module2[,... moduleN]]
```
调用引入模块中的函数：
```python
模块名.函数名
```

import 语句可以在程序的任何位置使用，你可以在程序中多次导入同一个模块，但模块中的代码*仅仅*在该模块被首次导入时执行。后面的import语句只是简单的创建一个到模块名字空间的引用而已。sys.modules字典中保存着所有被导入模块的模块名到模块对象的映射。这个字典用来决定是否需要使用import语句来导入一个模块的最新拷贝. [^1]

## 2. `from…import` 语句
Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。
语法如下：
```python
from modname import name1[, name2[, ... nameN]]
```
这个声明不会把整个模块导入到当前的命名空间中，它只会将模块里import指定的部分引入到执行这个声明的模块的`全局符号表`。

## 3. `from…import *` 语句
把一个模块的所有内容全都导入到当前的命名空间。
**注意**：这里强调的是`内容`，即导入的是另一个模块的`内容`，而不是另一个模块这个`模块`。
实际上，这个语法和`from…import`是类似的，只是`from…import`语句只导入另一个模块的某一个指定部分。
语法如下：
```python
from modname import *
```
这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。

**使用限制：**
- `from <module> import *`语法在python2中可以写在函数中，python3只允许写在module一级。
- `from <module> import *`不会将`_`开头的名称导入
- 如果一个模块如果定义有列表__all__，则from module import * 语句只能导入__all__列表中存在的对象。

## 4. 搜索路径
当你导入一个模块，Python 解析器对模块位置的搜索顺序是：
- 1、当前目录
- 2、如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。
- 3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为`/usr/local/lib/python/`。
模块搜索路径存储在 system 模块的 `sys.path`变量中。变量里包含当前目录，PYTHONPATH 和由安装过程决定的默认目录。

## `__main__` 模块名称
当在命令行运行一个模块文件时，Python解释器把模块内的一个特殊变量`__name__`置为`__main__`，而如果在其他地方导入该模块时，特殊变量`__name__`则不为`__main__`。
常用方法：
```python
def main():
    # Todo: Add your code here
    pass

if __name__ == '__main__':
    main()
```
当模块导入时，`if`判断将失败，并且我们知道，当模块导入时，模块中函数之外的代码也会被执行，而有时我们不希望导入的时候运行这部分代码。
因此，这种`if`测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。

# 二、PYTHONPATH 变量
作为环境变量，PYTHONPATH 由装在一个列表里的许多目录组成。PYTHONPATH 的语法和 shell 变量 PATH 的一样。

在 Windows 系统，典型的 PYTHONPATH 如下：
```bash
set PYTHONPATH=c:\python27\lib;
```
在 UNIX 系统，典型的 PYTHONPATH 如下：
```bash
set PYTHONPATH=/usr/local/lib/python
```

# 三、命名空间和作用域(namespace & LEGB)
==变量==: **拥有`匹配对象`的`名字（标识符）`**。
==命名空间==: **一个包含了`变量名称`们（键）和它们各自`相应的对象`们（值）的`字典`。**
一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。
每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。

Python 的命名空间包括：[^2]
- == Local #ff0000==（局部作用域）
- == Enclosed #ff0000==（嵌套作用域）
- == Global #ff0000==（全局作用域）
- == Built-in #ff0000==（内置作用域）

Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。
Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域” 的顺序进行搜索。
在Python中并不是所有的语句块中都会产生作用域。只有**当变量在Module(模块)、Class(类)、def(函数)中定义的时候，才会有作用域的概念。**

## 1. Local（局部）
在函数与类中，每当调用函数时都会创建一个局部作用域，局部变量域像一个栈，仅仅是暂时的存在，依赖创建该局部作用域的函数是否处于活动的状态； 默认情况下局部是无法修改全局变量的。
**如果要给 函数内的 全局变量赋值，必须使用 `global`语句。**
`global VarName` 的表达式会告诉 Python， `VarName` 是一个全局变量，这样 Python 就不会在局部命名空间里寻找这个变量了。
例1：
```python
Money = 2000
def AddMoney():
   # 声明 Money是全局变量
   global Money
   Money = Money + 1
# 调用函数
print Money
AddMoney()
print Money
```
上例中，如果不显示的添加`global Money`语句，则会报`UnboundLocalError`错误。
```python
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 4, in AddMoney
UnboundLocalError: local variable 'Money' referenced before assignment
```

## 2. Enclosed（嵌套）
一般出现在函数中嵌套了一个函数，在外围的函数中的作用域；主要目的是实现闭包。
例2：
```python
name = "lbj"          # 全局变量，全局作用域
def f1():
    print(name)
def f2():
    name = "coldplay" # 局部变量，局部作用域
    f1()
def f3():
    name = "cp4"      # 局部变量，局部作用域
    def f4():
        print(name)   # 获取上层函数的name进入当前函数的 嵌套作用域
    f4()
# 调用函数
>>> f2()
lbj
>>> f3()
cp4
```
**注意**：在上例中，调用函数f2()，f2()函数内部调用f1()，而f1() 函数本身定义的时候内部没有name这个局部变量，且f1()函数定义在f2()函数之外，两个函数没有形成嵌套关系，自然f2()中的局部变量对f1()无法形成 嵌套作用域，所以f1()函数只能再向上 搜索全局作用域。

函数内部的函数要修改 嵌套作用域中的变量，需要使用`nonlocal`关键字。使用方式参考 global关键字。
需要注意，`nonlocal` 关键字在python2中不存在。


## 3. Global（全局）
模块文件顶层声明的变量具有全局作用域，从外部看来，模块的全局变量就是一个模块对象的属性；仅限于单个模块文件中。

## 4. Built-in（内置）
系统内解释器定义的变量，如预定义在`builtin` 模块内的变量；解释器在则在，解释器亡则亡。

# 四、Python 中的包
包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。
简单来说，**包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。**__init__.py 用于标识当前文件夹是一个包。


# 五、闭包[^3]
理论基础：函数身为第一类对象，它可以作为函数的返回值返回。

闭包，顾名思义，就是一个封闭的包裹，里面包裹着自由变量，就像在类里面定义的属性值一样，自由变量的可见范围随同包裹，哪里可以访问到这个包裹，哪里就可以访问到这个自由变量。[^4]

- 本质上，闭包是一个函数。
- 装饰器也是基于闭包的一中应用场景
- 一般来说，当对象中只有一个方法时，这时使用闭包是更好的选择，比用类来实现更优雅。

例3：
```python
def print_msg():
    # print_msg 是外围函数
    msg = "zen of python"
    def printer():
        # printer 是嵌套函数
        print(msg)
    return printer
# 定义闭包
another = print_msg()
# 调用闭包。输出 zen of python
another()
```

例4：
```python
def adder(x):
    def wrapper(y):
        return x + y
    return wrapper
# 定义闭包
adder5 = adder(5)
# 输出 15
adder5(10)
# 输出 11
adder5(6)
```
例4图解如下：
![闭包图解](./images/闭包图解.png)

所有函数都有一个 `__closure__`属性，如果这个函数是一个闭包的话，那么它返回的是一个由 cell 对象 组成的元组对象。cell 对象的cell_contents 属性就是闭包中的自由变量。
```python
>>> adder.__closure__
>>> adder5.__closure__
(<cell at 0x103075910: int object at 0x7fd251604518>,)
>>> adder5.__closure__[0].cell_contents
5
```


[^1]:
    Python Import 详解 https://www.cnblogs.com/kungfupanda/p/5257174.html
[^2]:
    深入理解Python之作用域解析 https://zhuanlan.zhihu.com/p/50174320
[^3]:
    一步一步教你认识Python闭包 https://foofish.net/python-closure.html
[^4]:
    在计算机科学中，闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。












